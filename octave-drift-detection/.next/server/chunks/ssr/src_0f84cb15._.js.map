{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/Downloads/db__-main/db__-main/octave-drift-detection/src/services/backendService.ts"],"sourcesContent":["import { KPI, PlotDataPoint, TableDataPoint, RawErrorData } from '../types/dbTypes';\r\n\r\nconst API_BASE = 'http://localhost:5000/api';\r\nconst MAX_RETRIES = 3;\r\nconst RETRY_DELAY = 1000; // 1 second\r\n\r\nasync function fetchWithRetry(url: string, options: RequestInit = {}, retries = MAX_RETRIES): Promise<globalThis.Response> {\r\n  try {\r\n    const response = await fetch(url, options);\r\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n    return response;\r\n  } catch (error) {\r\n    if (retries <= 0) throw error;\r\n    console.warn(`Retrying ${url} (${MAX_RETRIES - retries + 1}/${MAX_RETRIES})`);\r\n    await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\r\n    return fetchWithRetry(url, options, retries - 1);\r\n  }\r\n}\r\n\r\nexport async function fetchBusinessUnits(): Promise<string[]> {\r\n  try {\r\n    const response = await fetchWithRetry(`${API_BASE}/businessUnits`);\r\n    const data = await response.json();\r\n    if (!Array.isArray(data)) {\r\n      throw new Error('Invalid business units response format');\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to fetch business units:', error);\r\n    throw new Error('Failed to fetch business units. Please try again later.');\r\n  }\r\n}\r\n\r\nexport async function fetchMode1KPIs(retries = MAX_RETRIES): Promise<KPI[]> {\r\n  try {\r\n    const response = await fetchWithRetry(`${API_BASE}/metrics/1`);\r\n    console.log('API response status:', response.status);\r\n    console.log('API response headers:', Object.fromEntries(response.headers.entries()));\r\n    const text = await response.text();\r\n    console.log('Raw API response:', text);\r\n    console.log('Response length:', text.length);\r\n    \r\n    try {\r\n      // First clean the response text\r\n      const cleanedText = text.trim();\r\n      \r\n      // Enhanced error code detection with better pattern matching\r\n      const errorCodePatterns = [\r\n        /^[A-Z0-9]{5,8}$/i,                // Case-insensitive plain error code\r\n        /^\"[A-Z0-9]{5,8}\"$/i,              // Case-insensitive quoted error code  \r\n        /(?:code|error)[\":\\s]+([A-Z0-9]{5,8})/i, // Matches \"code\":\"ABC123\" or error: \"ABC123\"\r\n        /(?:error|code)[\":\\s]+([A-Z0-9]{5,8})/i  // Matches error:\"ABC123\" or code: \"ABC123\"\r\n      ];\r\n      \r\n      let errorCode = null;\r\n      for (const pattern of errorCodePatterns) {\r\n        const match = cleanedText.match(pattern);\r\n        if (match) {\r\n          errorCode = match[0].replace(/[\"{}[\\]]/g, ''); // Clean the code\r\n          break;\r\n        }\r\n      }\r\n      \r\n      if (errorCode) {\r\n        const errorDetails = {\r\n          code: errorCode,\r\n          status: response.status,\r\n          headers: Object.fromEntries(response.headers.entries()),\r\n          url: response.url,\r\n          timestamp: new Date().toISOString(),\r\n          rawResponse: text,\r\n          retryAttempt: MAX_RETRIES - retries + 1\r\n        };\r\n        console.error('Backend error detected:', errorDetails);\r\n        \r\n        // If we have retries left, automatically retry\r\n        if (retries > 0) {\r\n          console.warn(`Retrying due to backend error code (${cleanedText})...`);\r\n          await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\r\n          return fetchMode1KPIs(retries - 1);\r\n        }\r\n        \r\n        throw new Error(`Backend service temporarily unavailable (code: ${cleanedText})`);\r\n      }\r\n      \r\n      // Check if response looks like JSON (starts with { or [)\r\n      if (!(cleanedText.startsWith('{') || cleanedText.startsWith('['))) {\r\n        console.error('Unexpected non-JSON response:', {\r\n          response: cleanedText,\r\n          status: response.status,\r\n          headers: Object.fromEntries(response.headers.entries())\r\n        });\r\n        throw new Error(`Unexpected API response format: ${cleanedText.substring(0, 20)}...`);\r\n      }\r\n\r\n      let data;\r\n      try {\r\n        // First try parsing the cleaned text directly\r\n        try {\r\n          data = JSON.parse(cleanedText);\r\n        } catch (initialError) {\r\n          // If direct parse fails, try extracting JSON\r\n          const jsonStart = cleanedText.search(/[{\\[]/);\r\n          if (jsonStart === -1) {\r\n            throw new Error('No JSON found in response');\r\n          }\r\n          \r\n          // More robust JSON extraction that handles nested structures\r\n          let jsonEnd = jsonStart;\r\n          let bracketCount = 0;\r\n          let inString = false;\r\n          let escapeNext = false;\r\n          \r\n          for (let i = jsonStart; i < cleanedText.length; i++) {\r\n            const char = cleanedText[i];\r\n            \r\n            if (escapeNext) {\r\n              escapeNext = false;\r\n              continue;\r\n            }\r\n            \r\n            if (char === '\\\\') {\r\n              escapeNext = true;\r\n              continue;\r\n            }\r\n            \r\n            if (char === '\"') {\r\n              inString = !inString;\r\n              continue;\r\n            }\r\n            \r\n            if (!inString) {\r\n              if (char === '{' || char === '[') bracketCount++;\r\n              if (char === '}' || char === ']') bracketCount--;\r\n              if (bracketCount === 0) {\r\n                jsonEnd = i;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          \r\n          const jsonText = cleanedText.substring(jsonStart, jsonEnd + 1);\r\n          data = JSON.parse(jsonText);\r\n        }\r\n    } catch (err) {\r\n        const parseError = err instanceof Error ? err : new Error(String(err));\r\n        console.error('JSON parse error:', {\r\n          error: parseError.message,\r\n          response: cleanedText,\r\n          status: response.status,\r\n          headers: Object.fromEntries(response.headers.entries()),\r\n          stack: parseError.stack\r\n        });\r\n        throw new Error(`API response parsing failed: ${parseError.message}`);\r\n      }\r\n\r\n      // Handle both array and object response formats\r\n      if (Array.isArray(data)) {\r\n        // If response is an array, assume it's the kpis array\r\n        data = { kpis: data };\r\n      }\r\n\r\n      // Validate the data structure\r\n      if (!data || !data.kpis) {\r\n        console.error('Invalid KPIs format:', {\r\n          response: data,\r\n          status: response.status,\r\n          headers: Object.fromEntries(response.headers.entries())\r\n        });\r\n        throw new Error('Invalid KPIs response format - missing kpis array');\r\n      }\r\n\r\n      if (!Array.isArray(data.kpis)) {\r\n        console.error('KPIs is not an array:', data.kpis);\r\n        throw new Error('Invalid KPIs array format');\r\n      }\r\n\r\n      // Process each KPI and remove the ID field\r\n      const processedKPIs = data.kpis.map((kpi: any) => {\r\n        if (!kpi.rowKey || !kpi.value) {\r\n          console.error('Invalid KPI format:', kpi);\r\n          throw new Error('Missing required KPI fields');\r\n        }\r\n\r\n        // Special handling for status KPI\r\n        if (kpi.rowKey === 'status') {\r\n          return {\r\n            rowKey: 'Status',\r\n            value: kpi.value,\r\n            status: kpi.value // Use value as status\r\n          };\r\n        }\r\n\r\n        // For all other KPIs\r\n        return {\r\n          rowKey: kpi.rowKey,\r\n          value: kpi.value,\r\n          status: 'Normal' // Default status\r\n        };\r\n      });\r\n\r\n      console.log('Processed KPIs:', processedKPIs);\r\n      return processedKPIs;\r\n    } catch (parseError: unknown) {\r\n      console.error('JSON parse error:', parseError, 'on text:', text);\r\n      throw new Error('Failed to parse API response');\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to fetch mode1 KPIs:', error);\r\n    throw new Error('Failed to fetch KPIs. Please try again later.');\r\n  }\r\n}\r\n\r\ninterface KPIResponse {\r\n  rowKey: string;\r\n  value: string;\r\n  status?: string;\r\n  businessUnit?: string;\r\n  useCase?: string;\r\n  id?: string;\r\n}\r\n\r\nexport async function fetchMode2KPIs(businessUnit?: string): Promise<KPI[]> {\r\n  try {\r\n    const url = businessUnit \r\n      ? `${API_BASE}/metrics/2/${businessUnit}`\r\n      : `${API_BASE}/metrics/2`;\r\n      \r\n    const response = await fetchWithRetry(url);\r\n    const text = await response.text();\r\n    \r\n    if (!response.ok) {\r\n      console.warn('API returned non-OK status, using mock data');\r\n      return generateMockKPIs();\r\n    }\r\n\r\n    let data;\r\n    try {\r\n      data = JSON.parse(text);\r\n    } catch (parseError) {\r\n      console.error('Failed to parse API response:', parseError);\r\n      throw new Error('Invalid API response format');\r\n    }\r\n\r\n    // Handle both direct array response and wrapped {kpis: [...]} format\r\n    const kpis: KPIResponse[] = Array.isArray(data) ? data : (data?.kpis || []);\r\n    \r\n    if (kpis.length === 0) {\r\n      console.warn('Empty KPIs array received, using mock data');\r\n      return generateMockKPIs();\r\n    }\r\n\r\n    // Enhanced response processing with better type checking\r\n    return kpis.map(kpi => {\r\n      if (!kpi.rowKey || kpi.value === undefined) {\r\n        console.warn('Invalid KPI format:', kpi);\r\n        throw new Error('Invalid KPI response format');\r\n      }\r\n\r\n      return {\r\n        rowKey: kpi.rowKey,\r\n        value: String(kpi.value),\r\n        status: kpi.status || 'Normal',\r\n        businessUnit: kpi.businessUnit,\r\n        useCase: kpi.useCase,\r\n        ...(kpi.id && { id: kpi.id }) // Preserve ID if present\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Failed to fetch mode2 KPIs:', error);\r\n    if (error instanceof Error) {\r\n      throw new Error(`Failed to fetch KPIs: ${error.message}`);\r\n    }\r\n    throw new Error('Failed to fetch KPIs. Please try again later.');\r\n  }\r\n}\r\n\r\nexport async function fetchMode3KPIs(): Promise<KPI[]> {\r\n  try {\r\n    const response = await fetchWithRetry(`${API_BASE}/metrics/3`);\r\n    const data = await response.json();\r\n    \r\n    if (!Array.isArray(data)) {\r\n      throw new Error('Invalid KPIs response format');\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to fetch mode3 KPIs:', error);\r\n    throw new Error('Failed to fetch KPIs. Please try again later.');\r\n  }\r\n}\r\n\r\nexport async function fetchMode4KPIs(): Promise<KPI[]> {\r\n  try {\r\n    const response = await fetchWithRetry(`${API_BASE}/metrics/4`);\r\n    const data = await response.json();\r\n    \r\n    if (!Array.isArray(data)) {\r\n      throw new Error('Invalid KPIs response format');\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Failed to fetch mode4 KPIs:', error);\r\n    throw new Error('Failed to fetch KPIs. Please try again later.');\r\n  }\r\n}\r\n\r\nexport async function fetchMode1XAIData(): Promise<string> {\r\n  try {\r\n    const response = await fetchWithRetry(`${API_BASE}/xai/1`);\r\n    const data = await response.json();\r\n    \r\n    if (typeof data === 'string') {\r\n      return data;\r\n    } else if (data?.text) {\r\n      return data.text;\r\n    }\r\n    throw new Error('Invalid XAI response format');\r\n  } catch (error) {\r\n    console.error('Failed to fetch mode1 XAI data:', error);\r\n    throw new Error('Failed to fetch XAI data. Please try again later.');\r\n  }\r\n}\r\n\r\nexport async function fetchMode2XAIData(businessUnit?: string): Promise<string> {\r\n  try {\r\n    const url = businessUnit \r\n      ? `${API_BASE}/xai/2/${businessUnit}`\r\n      : `${API_BASE}/xai/2`;\r\n      \r\n    const response = await fetchWithRetry(url);\r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API returned status ${response.status}`);\r\n    }\r\n\r\n    // Handle both string and object response formats\r\n    if (typeof data === 'string') {\r\n      return data;\r\n    } else if (data?.text) {\r\n      return data.text;\r\n    } else if (data?.explanation) {\r\n      return data.explanation;\r\n    }\r\n    \r\n    throw new Error('Invalid XAI response format');\r\n  } catch (error) {\r\n    console.error('Failed to fetch mode2 XAI data:', error);\r\n    if (error instanceof Error) {\r\n      throw new Error(`Failed to fetch XAI data: ${error.message}`);\r\n    }\r\n    throw new Error('Failed to fetch XAI data. Please try again later.');\r\n  }\r\n}\r\n\r\ntype BusinessUnit = 'CCS' | 'JMSL';\r\n\r\nfunction generateMockKPIs(): KPI[] {\r\n  const now = new Date();\r\n  const businessUnits: BusinessUnit[] = ['CCS', 'JMSL'];\r\n  const useCases: Record<BusinessUnit, string[]> = {\r\n    'CCS': ['CC-Di', 'CC-MT'],\r\n    'JMSL': ['JM-Ch']\r\n  };\r\n  const selectedBU = businessUnits[Math.floor(Math.random() * businessUnits.length)] as BusinessUnit;\r\n  \r\n  return [\r\n    {\r\n      rowKey: 'alertTime',\r\n      value: new Date(now.getTime() - Math.random() * 48 * 60 * 60 * 1000).toISOString(),\r\n      status: 'Normal',\r\n      businessUnit: selectedBU,\r\n      useCase: useCases[selectedBU][0]\r\n    },\r\n    {\r\n      rowKey: 'runtimeCount', \r\n      value: Math.floor(Math.random() * 300).toString(),\r\n      status: 'Normal',\r\n      businessUnit: selectedBU,\r\n      useCase: useCases[selectedBU][0]\r\n    },\r\n    {\r\n      rowKey: 'alertKeeper',\r\n      value: `${selectedBU} Admin`,\r\n      status: 'Normal',\r\n      businessUnit: selectedBU,\r\n      useCase: useCases[selectedBU][0]\r\n    },\r\n    {\r\n      rowKey: 'currentDrift1',\r\n      value: Math.random().toFixed(2),\r\n      status: Math.random() > 0.8 ? 'Warning' : 'Normal',\r\n      businessUnit: selectedBU,\r\n      useCase: useCases[selectedBU][0]\r\n    },\r\n    {\r\n      rowKey: 'currentDrift2',\r\n      value: Math.random().toFixed(2),\r\n      status: Math.random() > 0.8 ? 'Warning' : 'Normal',\r\n      businessUnit: selectedBU,\r\n      useCase: useCases[selectedBU][0]\r\n    },\r\n    {\r\n      rowKey: 'status',\r\n      value: Math.random() > 0.9 ? 'Error' : (Math.random() > 0.7 ? 'Warning' : 'Normal'),\r\n      status: Math.random() > 0.9 ? 'Error' : (Math.random() > 0.7 ? 'Warning' : 'Normal'),\r\n      businessUnit: selectedBU,\r\n      useCase: useCases[selectedBU][0]\r\n    },\r\n    {\r\n      rowKey: 'businessUnit',\r\n      value: selectedBU,\r\n      status: 'Normal',\r\n      businessUnit: selectedBU,\r\n      useCase: useCases[selectedBU][0]\r\n    },\r\n    {\r\n      rowKey: 'useCase',\r\n      value: useCases[selectedBU][0],\r\n      status: 'Normal',\r\n      businessUnit: selectedBU,\r\n      useCase: useCases[selectedBU][0]\r\n    }\r\n  ];\r\n}\r\n\r\nexport async function checkBackendHealth(): Promise<boolean> {\r\n  try {\r\n    const response = await fetchWithRetry(`${API_BASE}/health`, {}, 1); // Only retry once for health check\r\n    return response.ok;\r\n  } catch (error) {\r\n    console.error('Backend health check failed:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function fetchErrors(): Promise<{plotData: PlotDataPoint[], tableData: TableDataPoint[]}> {\r\n  try {\r\n    const response = await fetchWithRetry(`${API_BASE}/errors`);\r\n    const text = await response.text();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API returned status ${response.status}`);\r\n    }\r\n\r\n    let backendErrors;\r\n    try {\r\n      backendErrors = JSON.parse(text);\r\n    } catch (parseError: unknown) {\r\n      console.error('Failed to parse errors response:', parseError, 'Response:', text);\r\n      throw new Error('Invalid errors response format');\r\n    }\r\n\r\n    if (!backendErrors) {\r\n      throw new Error('Empty errors response');\r\n    }\r\n\r\n    // Enhanced error data processing with better type safety\r\n    const processErrorData = (err: RawErrorData) => {\r\n      if (!err.id) {\r\n        console.error('Backend error data missing ID:', err);\r\n        throw new Error('Backend error data is missing required id field');\r\n      }\r\n      \r\n      const meanPred = typeof err.meanPrediction === 'number' ? err.meanPrediction : 0;\r\n      const errorVal = typeof err.error === 'number' ? err.error : 0;\r\n      \r\n      return {\r\n        id: err.id,\r\n        timePeriod: err.timePeriod || new Date().toISOString(),\r\n        meanPrediction: meanPred,\r\n        error: errorVal,\r\n        percentageError: typeof err.percentageError === 'number' \r\n          ? err.percentageError \r\n          : (meanPred ? (errorVal / meanPred) * 100 : 0),\r\n        status: err.exceedsThreshold ? 'Alert' : 'Normal'\r\n      };\r\n    };\r\n\r\n    // Handle both array and object response formats\r\n    const errors = Array.isArray(backendErrors) ? \r\n      {plotData: [], tableData: backendErrors} : \r\n      backendErrors;\r\n      \r\n    const plotData: PlotDataPoint[] = (errors.plotData || []).map((err: RawErrorData) => {\r\n      const timePeriod = err.timePeriod || new Date().toISOString();\r\n      const errorValue = typeof err.error === 'number' ? err.error : 0;\r\n      return {\r\n        x: timePeriod,\r\n        y: errorValue,\r\n        exceedsThreshold: Boolean(err.exceedsThreshold)\r\n      } as PlotDataPoint;\r\n    });\r\n\r\n    const tableData: TableDataPoint[] = (errors.tableData || []).map((err: RawErrorData) => {\r\n      const timePeriod = err.timePeriod || new Date().toISOString();\r\n      const meanPrediction = typeof err.meanPrediction === 'number' ? err.meanPrediction : 0;\r\n      const errorValue = typeof err.error === 'number' ? err.error : 0;\r\n      const percentageError = typeof err.percentageError === 'number' ? err.percentageError : 0;\r\n      return {\r\n        id: err.id || '',\r\n        timePeriod: timePeriod,\r\n        meanPrediction: meanPrediction,\r\n        error: errorValue,\r\n        percentageError: percentageError,\r\n        status: err.exceedsThreshold ? 'Alert' : 'Normal'\r\n      } as TableDataPoint;\r\n    });\r\n\r\n    // If no data, generate sample data\r\n    if (plotData.length === 0 && tableData.length === 0) {\r\n      console.warn('No error data received, generating sample data');\r\n      const sampleErrors: RawErrorData[] = Array.from({length: 10}, (_, i) => ({\r\n        id: `MISSING_BACKEND_ID_${i}`,\r\n        timePeriod: new Date(Date.now() - (i * 86400000)).toISOString(),\r\n        meanPrediction: Math.random() * 100,\r\n        error: Math.random() * 20,\r\n        exceedsThreshold: Math.random() > 0.7,\r\n        percentageError: Math.random() * 30\r\n      }));\r\n\r\n      return {\r\n        plotData: sampleErrors.map((err: RawErrorData) => ({\r\n          x: err.timePeriod || new Date().toISOString(),\r\n          y: err.error || 0,\r\n          exceedsThreshold: Boolean(err.exceedsThreshold)\r\n        } as PlotDataPoint)),\r\n        tableData: sampleErrors.map((err: RawErrorData) => ({\r\n          id: err.id || '',\r\n          timePeriod: err.timePeriod || new Date().toISOString(),\r\n          meanPrediction: err.meanPrediction || 0,\r\n          error: err.error || 0,\r\n          percentageError: err.percentageError || 0,\r\n          status: err.exceedsThreshold ? 'Alert' : 'Normal'\r\n        } as TableDataPoint))\r\n      };\r\n    }\r\n\r\n    return { plotData, tableData };\r\n  } catch (error) {\r\n    console.error('Failed to fetch errors:', error);\r\n    \r\n    // Generate comprehensive fallback data\r\n      const sampleErrors: RawErrorData[] = Array.from({length: 10}, (_, i) => ({\r\n        id: `MISSING_BACKEND_ID_${i}`,\r\n        timePeriod: new Date(Date.now() - (i * 86400000)).toISOString(),\r\n        meanPrediction: Math.random() * 100,\r\n        error: Math.random() * 20,\r\n        exceedsThreshold: Math.random() > 0.7,\r\n        percentageError: Math.random() * 30\r\n      }));\r\n\r\n      return {\r\n        plotData: sampleErrors.map((err: RawErrorData) => ({\r\n          x: err.timePeriod || new Date().toISOString(),\r\n          y: err.error || 0,\r\n          exceedsThreshold: Boolean(err.exceedsThreshold)\r\n        } as PlotDataPoint)),\r\n        tableData: sampleErrors.map((err: RawErrorData) => ({\r\n          id: err.id || '',\r\n          timePeriod: err.timePeriod || new Date().toISOString(),\r\n          meanPrediction: err.meanPrediction || 0,\r\n          error: err.error || 0,\r\n          percentageError: err.percentageError || 0,\r\n          status: err.exceedsThreshold ? 'Alert' : 'Normal'\r\n        } as TableDataPoint))\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}